@page "/admin"
@attribute [Authorize(Roles = "Admin")]
@inject IDashboardService Service
@inject IJSRuntime JsRuntime

<title>@Title</title>

<_PageHeader />

@if (IsProcessing || Entity is null)
{
    <_Loading />
}
else
{
    <div class="@App?.GetContentClass()">

        <div class="row">
            <div class="col-xl-3 col-md-6">
                <a href="admin/roles"><_IconComponent Icon="R" Title="Roles" Value="@Entity.RoleCount" PredictedValue="5" /></a>
            </div>

            <div class="col-xl-3 col-md-6">
                <a href="admin/users"><_IconComponent Icon="U" Title="Users" Value="@Entity.UserCount" PredictedValue="100" /></a>
            </div>
        </div>

        <canvas class="mt-3" id="ordersChartCanvas" width="400" height="100"></canvas>
    </div>
}


@code {
    #region ---> START PAGE
    [CascadingParameter] AppState? App { get; set; }

    DashboardDto? Entity;

    // List<OrderChartDto> OrderCharts = new();

    const string Title = "Dashboard";

    bool IsProcessing { get; set; } = true;



    protected override async Task OnInitializedAsync() => await LoadData();


    async Task LoadData()
    {
        var result = await Service.GetAllAsync();
        if (!result.Success && result.Data is null) return;

        Entity = result.Data;
        //OrderCharts = Dashboard?.OrderCharts!;
        IsProcessing = false;
        StateHasChanged();
    }
    #endregion

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         await Task.Delay(500);

    //         var dummyOrders = new List<OrderChartDto>
    //         {
    //             new OrderChartDto(DateTime.Now.AddDays(-50), 125.97m),
    //             new OrderChartDto(DateTime.Now.AddDays(-45), 332.96m),
    //             new OrderChartDto(DateTime.Now.AddDays(-40), 151.26m),
    //             new OrderChartDto(DateTime.Now.AddDays(-35), 315.96m),
    //             new OrderChartDto(DateTime.Now.AddDays(-30), 252.97m),
    //             new OrderChartDto(DateTime.Now.AddDays(-25), 105.97m),
    //             new OrderChartDto(DateTime.Now.AddDays(-20), 132.96m),
    //             new OrderChartDto(DateTime.Now.AddDays(-15), 251.26m),
    //             new OrderChartDto(DateTime.Now.AddDays(-10), 115.96m),
    //             new OrderChartDto(DateTime.Now.AddDays(-5), 172.97m)
    //         };

    //         OrderCharts.AddRange(dummyOrders);
    //         OrderCharts = OrderCharts.OrderByDescending(o => o.Date).ToList();

    //         if (OrderCharts.Any())
    //         {
    //             var labels = OrderCharts.Select(o => o.Date.ToString("dd-MM-yyyy")).ToArray();
    //             var totals = OrderCharts.Select(o => o.Total ?? 0).ToArray();

    //             await JsRuntime.InvokeVoidAsync("initializeOrdersChart", "ordersChartCanvas", labels, totals);
    //             StateHasChanged();
    //         }
    //     }
    // }
}