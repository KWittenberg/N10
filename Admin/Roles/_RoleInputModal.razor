@inject IRoleRepository Repository

<!-- Role Input Modal Component -->
<div class="modal fade @(Show ? "show d-block" : "") bg-transparent60" tabindex="-1" style="display:@(Show ? "block" : "none");" role="dialog" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <div class="modal-header border-0">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Input New Role</h1>
                <button type="button" class="btn-close" @onclick="Hide"></button>
            </div>

            <div class="modal-body">
                @if (Input is not null)
                {
                    <EditForm Enhance Model=@Input OnValidSubmit=@HandleValidSubmit>
                        <div class="p-2">
                            <InputText class="form-control" @bind-Value="Input.Name" placeholder=" add new role" required />
                        </div>
                        <div class="m-2 p-2 text-end">
                            <button type="button" class="mx-2 btn btn-outline-secondary shadow" @onclick="Hide">Cancel</button>
                            <button type="submit" class="btn btn-primary w-50 shadow">Add</button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </div>
</div>


@code {
    [CascadingParameter] AppState? App { get; set; }
    
    [Parameter] public bool Show { get; set; } = false;

    [Parameter] public EventCallback OnAddEventCallback { get; set; }
    

    
    
    RoleInput? Input { get; set; } = new RoleInput() { Name = string.Empty };

    
    void Hide()
    {
        Show = false;
        StateHasChanged();
    }

    async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);

        var result = await Repository.AddAsync(Input);
        if (result.Success)
        {
            Input = new RoleInput();
            await OnAddEventCallback.InvokeAsync();
            Hide();
        }
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }


}