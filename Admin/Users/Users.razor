@page "/admin/users"
@attribute [Authorize(Roles = "Admin")]
@inject IUserRepository Repository

<title>@Title</title>

<_PageHeader Title="@Title" AddButtonText="Add User" AddButtonLink="user" />

@if (IsProcessing || Entities is null)
{
    <_Loading />
}
else
{
    <div class="@App?.GetContentClass()">
        <div class="quickgrid-wrapper-sm table-responsive">
            <QuickGrid TGridItem="UserDto" Class="table table-striped table-hover align-middle p-sm" ItemsProvider="LoadUsers" Pagination="PaginationState">
                @* <PropertyColumn Property="x => x.Id" Title="Id" Align="Align.Center" Sortable="true" /> *@
                <TemplateColumn Title="Avatar" Align="Align.Center">
                    <img class="rounded-circle" style="width: 2rem" src="@(string.IsNullOrEmpty(context.AvatarUrl) ? Placeholder.AvatarUrl : context.AvatarUrl)" alt="Avatar">
                </TemplateColumn>
                <TemplateColumn Title="Roles" Align="Align.Center">
                    @foreach (var role in context.Roles!)
                    {
                        <div class="py-2 text-center">
                            @{
                                var roleColor = (role.Name == "Admin") ? "bg-danger" : "bg-primary";
                            }
                            <span class="badge rounded-pill @roleColor m-0">@role.Name</span>
                        </div>
                    }
                </TemplateColumn>
                <PropertyColumn Property="x => x.FirstName" Title="First Name" Align="Align.Center" Sortable="true" />
                <PropertyColumn Property="x => x.LastName" Title="Last Name" Align="Align.Center" Sortable="true" />
                <PropertyColumn Property="x => x.Email" Title="Email" Align="Align.Center" Sortable="true" />

                @if (App!.IsExpanded)
                {
                    <PropertyColumn Property="x => x.CompanyName" Title="Company" Align="Align.Center" Sortable="true" />
                    <TemplateColumn Title="EmailConfirmed" Align="Align.Center">
                        <div class="d-flex justify-content-center">
                            <input class="form-check form-check-input text-warning" type="checkbox" checked="@context.EmailConfirmed">
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.PhoneNumber" Title="Phone" Align="Align.Center" Sortable="true" />
                    <TemplateColumn Title="PhoneConfirmed" Align="Align.Center">
                        <div class="d-flex justify-content-center">
                            <input class="form-check form-check-input text-warning" type="checkbox" checked="@context.PhoneNumberConfirmed">
                        </div>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Country" Title="Country" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.Zip" Title="Zip" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.City" Title="City" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.Street" Title="Street" Align="Align.Center" Sortable="true" />


                    @*<PropertyColumn Property="x => x.Latitude" Title="Latitude" Align="Align.Center" Sortable="true" />
					<PropertyColumn Property="x => x.Longitude" Title="Longitude" Align="Align.Center" Sortable="true" />
					<PropertyColumn Property="x => x.PlaceId" Title="PlaceId" Align="Align.Center" Sortable="true" /> *@
                    <TemplateColumn Title="IsActive" Align="Align.Center">
                        <div class="d-flex justify-content-center">
                            <input class="form-check form-check-input text-warning" type="checkbox" checked="@context.IsActive">
                        </div>
                    </TemplateColumn>
                    @* <TemplateColumn Title="IsDeleted" Align="Align.Center">
                        <div class="d-flex justify-content-center">
                            <input class="form-check form-check-input text-warning" type="checkbox" checked="@context.IsDeleted">
                        </div>
                    </TemplateColumn> 
                    <PropertyColumn Property="x => x.CreatedId" Title="CreatedId" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.CreatedUtc" Title="CreatedUtc" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.LastModifiedId" Title="LastModifiedId" Align="Align.Center" Sortable="true" />
                    <PropertyColumn Property="x => x.LastModifiedUtc" Title="LastModifiedUtc" Align="Align.Center" Sortable="true" />*@
                }
                <TemplateColumn Title="Actions" Align="Align.Center">
                    <a class="me-2" href="admin/user/@context.Id" data-toggle="tooltip" title="Edit"><i class="bi bi-pencil-square"></i></a>
                    <a class="text-danger" @onclick="() => ShowDelete(context)" title="Remove"><i class="bi bi-trash"></i></a>
                </TemplateColumn>
            </QuickGrid>
            <div class="quickgrid-pagination">
                <Paginator State="PaginationState" />
            </div>
        </div>
    </div>
}


@code {
    [CascadingParameter] AppState? App { get; set; }

    ResultQPagination<UserDto>? Entities;

    const string Title = "Users";

    bool IsProcessing { get; set; } = true;

    readonly PaginationState PaginationState = new PaginationState { ItemsPerPage = 15 };


    #region ---> INITIALIZATION
    protected override async Task OnInitializedAsync() => await LoadEntities();

    async Task LoadEntities()
    {
        Entities = await Repository.GetPagedAsync(0, PaginationState.ItemsPerPage, null, null, false);

        IsProcessing = false;
        StateHasChanged();
    }

    async ValueTask<GridItemsProviderResult<UserDto>> LoadUsers(GridItemsProviderRequest<UserDto> request)
    {
        var pageZeroBased = request.StartIndex / PaginationState.ItemsPerPage;

        var sortDescriptor = request.GetSortByProperties().FirstOrDefault();
        string? sortBy = sortDescriptor.PropertyName;
        bool sortDesc = sortDescriptor.Direction == SortDirection.Descending;

        var response = await Repository.GetPagedAsync(pageZeroBased, PaginationState.ItemsPerPage, null, sortBy, sortDesc);

        if (response == null || response.Data == null || response.Pagination == null) return GridItemsProviderResult.From(new List<UserDto>(), 0);

        return GridItemsProviderResult.From(response.Data, response.Pagination.TotalRecords);
    }

    // async ValueTask<GridItemsProviderResult<UserDto>> LoadUsers(GridItemsProviderRequest<UserDto> request)
    // {
    //     int page = (request.StartIndex / PaginationState.ItemsPerPage) + 1;

    //     // For Sort
    //     var sortBy = request.GetSortByProperties().FirstOrDefault();
    //     var response = await Repository.GetPagedAsync(page, PaginationState.ItemsPerPage, sortBy.PropertyName, null, sortBy.Direction == SortDirection.Descending);

    //     // No Sort
    //     // var response = await Repository.GetPaginatedAsync(page, PaginationState.ItemsPerPage);
    //     if (response.Pagination == null || response.Data == null) return GridItemsProviderResult.From(new List<UserDto>(), 0);

    //     return GridItemsProviderResult.From(response.Data, response.Pagination.TotalRecords);
    // }
    #endregion

    #region ---> DELETE
    void ShowDelete(UserDto input)
    {
        App?.ShowDeleteConfirmation($"{input.FirstName} {input.LastName}", input.Id.ToString(), EventCallback.Factory.Create(this, () => ConfirmDelete(input.Id)));
    }

    async Task ConfirmDelete(Guid id)
    {
        var result = await Repository.DeleteAsync(id);
        if (result.Success) await LoadEntities();

        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
    }
    #endregion

}