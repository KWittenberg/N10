@page "/admin/note/{id:guid?}"

@inject INoteRepository Repository
@inject NavigationManager Navigation

<title>@Title</title>

<_PageHeader Title="@Title" />


@if (Input is not null)
{
    <div class="@App?.GetContentClass()">
        <div class="mt-5 row justify-content-center">
            <div class="col-12 col-md-6">
                <EditForm Model=@Input OnValidSubmit=@HandleValidSubmit class="w-100 w-md-50">

                    @* <StatusMessage Message="@Message" /> *@
                    <h1>@Title</h1>
                    <DataAnnotationsValidator />
                    <hr />

                    <div class="row">

                        <div class="col-10 form-floating">
                            <InputText @bind-Value="Input.Title" class="form-control" aria-required="true" placeholder=" " />
                            <label for="Input.Title">Title</label>
                            <ValidationMessage For="() => Input.Title" class="text-danger" />
                        </div>
                        <div class="col-2">
                            <input type="color" class="form-control form-control-color w-100 h-100" @bind-value="@Input.Color" title="Set color for Note">
                        </div>
                        <div class="mt-3 form-floating">
                            <InputTextArea @bind-Value="Input.Content" class="form-control" style="height: 150px" placeholder="Content" />
                            <label for="Input.Content">Content</label>
                            <ValidationMessage For="() => Input.Content" class="text-danger" />
                        </div>
                    </div>












                    <div class="mt-4 p-0 text-end">
                        <a href="admin/notes" class="btn btn-secondary">back</a>
                        <button class="btn btn-primary w-50" type="submit">Save</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
}


@code {
    [CascadingParameter] AppState? App { get; set; }

    [Parameter] public Guid? Id { get; set; } = Guid.Empty;

    NoteInput? Input { get; set; }

    string Title => Id.HasValue ? "Update Note" : "Add Note";




    protected override async Task OnParametersSetAsync()
    {
        if (Input is not null) return;
        if (!Id.HasValue) Input = new NoteInput();
        else
        {
            var result = await Repository.GetByIdAsync((Guid)Id);
            if (!result.Success || result.Data is null) return;
            Input = result.Data.ToInput();
        }
    }

    async Task HandleValidSubmit()
    {
        ArgumentNullException.ThrowIfNull(Input);

        Input.UserId = App?.CurrentUser?.Id ?? Guid.Empty;

        var result = Id is null
            ? await Repository.AddAsync(Input)
            : await Repository.UpdateAsync(Id.Value, Input);

        if (result.Success) Navigation.NavigateTo("/admin/notes");
        await App!.ShowToast(result.Message, result.Success ? "success" : "error");
        StateHasChanged();
    }
}