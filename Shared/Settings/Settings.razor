@inject IJSRuntime JsRuntime

<!-- Settings -->
<div class="open-settings">
    <a type="button" data-bs-toggle="offcanvas" data-bs-target="#Settings" aria-controls="settings">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" viewBox="0 0 20 20" height="20" fill="none" class="svg-icon"
             data-bs-toggle="tooltip" data-bs-placement="auto" data-bs-custom-class="custom-tooltip" data-bs-title="Settings">
            <g stroke-width="1.5" stroke-linecap="round" stroke="#fff">
                <circle r="2.5" cy="10" cx="10"></circle>
                <path fill-rule="evenodd" d="m8.39079 2.80235c.53842-1.51424 2.67991-1.51424 3.21831-.00001.3392.95358 1.4284 1.40477 2.3425.97027 1.4514-.68995 2.9657.82427 2.2758 2.27575-.4345.91407.0166 2.00334.9702 2.34248 1.5143.53842 1.5143 2.67996 0 3.21836-.9536.3391-1.4047 1.4284-.9702 2.3425.6899 1.4514-.8244 2.9656-2.2758 2.2757-.9141-.4345-2.0033.0167-2.3425.9703-.5384 1.5142-2.67989 1.5142-3.21831 0-.33914-.9536-1.4284-1.4048-2.34247-.9703-1.45148.6899-2.96571-.8243-2.27575-2.2757.43449-.9141-.01669-2.0034-.97028-2.3425-1.51422-.5384-1.51422-2.67994.00001-3.21836.95358-.33914 1.40476-1.42841.97027-2.34248-.68996-1.45148.82427-2.9657 2.27575-2.27575.91407.4345 2.00333-.01669 2.34247-.97026z" clip-rule="evenodd"></path>
            </g>
        </svg>
    </a>
</div>

@* <div id="Settings" class="offcanvas offcanvas-end" tabindex="-1" aria-labelledby="offcanvasSettingsLabel"
style="background-image: url('@(string.IsNullOrEmpty(App?.Background?.ImageUrl) ? Placeholder.BackgroundUrl : App.Background?.ImageUrl)')"> *@


<div id="Settings" class="offcanvas offcanvas-end" tabindex="-1" aria-labelledby="offcanvasSettingsLabel">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="offcanvasSettings">Settings</h5>
        <div class="d-flex align-items-center gap-2">
            @* <a type="button" @onclick="@DeleteBg"><i class="bi bi-arrow-repeat"></i></a> *@
            <i class="bi @(isDarkTheme ? "bi bi-lightbulb-fill" : "bi bi-lightbulb-off-fill")" @onclick="OnThemeToggle"></i>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
    </div>

    <div class="offcanvas-body">

        @* <div class="content">
            <p>Main Content</p>
            <div class="icon-title">
                <i class="@App?.GetContentIconClass()" @onclick="@OnChange"></i> 
                <span>@(App!.IsExpanded ? "Wide" : "Compact")</span>
            </div>
        </div> *@

        <h4 class="text-center">Built in themes for your template</h4>

        <div class="d-flex flex-wrap gap-3 align-items-center justify-content-center my-3">
            @foreach (string theme in siteThemes)
            {
                <div class="card" data-cf-theme="@theme">
                    <div class="card-body">
                        <h3 class="card-title d-flex align-items-center">
                            Theme:&nbsp;<span style="color: var(--cf-theme-core)">@theme</span>
                            <button class="ms-auto btn btn-sm btn-primary" @onclick="() => ChangeTheme(theme)">Set Theme</button>
                        </h3>
                        <h6 class="small fw-bold mt-3">Palette</h6>
                        <div class="d-flex gap-0 align-items-center">
                            @foreach (string weight in Weights)
                            {
                                <div style="background-color: var(--cf-theme-@weight); width:24px; height: 24px;"></div>
                            }
                        </div>
                        <div class="my-3">
                            <button class="btn btn-sm btn-primary">Primary</button>
                            <button class="btn btn-sm btn-light">Light</button>
                            <button class="btn btn-sm btn-dark">Dark</button>
                        </div>
                        <p-sm>Text with a <a href="#">clickable link</a> in the middle.</p-sm>
                    </div>
                </div>
            }
        </div>
    </div>
</div>


@code {
    [CascadingParameter] AppState? App { get; set; }

    bool isDarkTheme = true;
    bool isInitialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var theme = await JsRuntime.InvokeAsync<string>("getBootstrapTheme");
            isDarkTheme = theme == "dark";
            isInitialized = true;
            StateHasChanged();
        }
    }

    async Task OnThemeToggle()
    {
        var newTheme = await JsRuntime.InvokeAsync<string>("toggleBootstrapTheme");
        isDarkTheme = newTheme == "dark";
        StateHasChanged();
    }

    async Task ChangeTheme(string theme) => await JsRuntime.InvokeVoidAsync("setTheme", theme);

    List<string> siteThemes = new(){
        "code-magic",
        "blue",
        "indigo",
        "purple",
        "pink",
        "red",
        "orange",
        "yellow",
        "green",
        "teal",
        "cyan",
        "gray"
    };

    List<string> Weights = new()
    {
        "core",
        "100",
        "150",
        "200",
        "300",
        "400",
        "500",
        "600",
        "700",
        "800",
        "850",
        "900"
    };
}